# 进行卡方检验
chisq_result <- chisq.test(cross_tab)
# 将p值转换为科学计数法形式
p_value_sci <- format(chisq_result$p.value, scientific = TRUE)
# 绘制百分比堆积图，并应用自定义颜色调色板，添加卡方检验的p值
ggplot(data_summary, aes(x = group, y = percentage, fill = factor(level))) +
geom_bar(stat = "identity", position = "fill") +
labs(title = NULL, x = "Group", y = "% of cases") +
scale_fill_manual(values = custom_palette) +
geom_text(data = as.data.frame(cross_tab), aes(label = as.vector(cross_tab)),
position = position_fill(vjust = 0.5), color = "black", size = 3) +
geom_text(aes(x = 1.5, y = 5, label = paste("p =", p_value_sci)),
color = "black", size = 5, hjust = 0.5, parse = TRUE) + # 添加p值标签（以科学计数法形式）
theme_minimal()
rlang::last_trace()
# 读取CSV文件并计算频率百分比
data <- read.csv("data2.csv")
data_summary <- data %>%
group_by(group, level) %>%
summarize(count = n()) %>%
mutate(percentage = count / sum(count) * 100)
# 创建R × C列联表
cross_tab <- table(data$group, data$level)
# 进行卡方检验
chisq_result <- chisq.test(cross_tab)
# 将p值转换为科学计数法形式
p_value_sci <- format(chisq_result$p.value, scientific = TRUE)
# 绘制百分比堆积图，并应用自定义颜色调色板，添加卡方检验的p值
ggplot(data_summary, aes(x = group, y = percentage, fill = factor(level))) +
geom_bar(stat = "identity", position = "fill") +
labs(title = NULL, x = "Group", y = "% of cases") +  # 删去标题和底注，修改y轴标注
scale_fill_manual(values = custom_palette) +  # 应用自定义颜色
geom_text(aes(x = 1.5, y = 5, label = paste("p =", p_value_sci)),
color = "black", size = 5, hjust = 0.5) + # 添加p值标签
theme_minimal()
# 读取CSV文件并计算频率百分比
data <- read.csv("data2.csv")
data_summary <- data %>%
group_by(group, level) %>%
summarize(count = n()) %>%
mutate(percentage = count / sum(count) * 100)
# 创建R × C列联表
contingency_table <- table(data_summary$group, data_summary$level)
# 进行卡方检验
chisq_result <- chisq.test(contingency_table)
# 将p值转换为科学计数法形式
p_value_sci <- format(chisq_result$p.value, scientific = TRUE)
# 绘制百分比堆积图，并应用自定义颜色调色板，添加卡方检验的p值
ggplot(data_summary, aes(x = group, y = percentage, fill = factor(level))) +
geom_bar(stat = "identity", position = "fill") +
labs(title = NULL, x = "Group", y = "% of cases") +  # 删去标题和底注，修改y轴标注
scale_fill_manual(values = custom_palette) +  # 应用自定义颜色
geom_text(data = as.data.frame(contingency_table), aes(label = as.vector(contingency_table)),
position = position_fill(vjust = 0.5), color = "black", size = 3) + # 添加频数标签
geom_text(aes(x = 1.5, y = 5, label = paste("p =", p_value_sci)),
color = "black", size = 5, hjust = 0.5) + # 添加p值标签（以科学计数法形式）
theme_minimal()
# 读取CSV文件并计算频率百分比
data <- read.csv("data2.csv")
data_summary <- data %>%
group_by(group, level) %>%
summarize(count = n()) %>%
mutate(percentage = count / sum(count) * 100)
# 创建R × C列联表
contingency_table <- table(data_summary$group, data_summary$level)
# 进行卡方检验
chisq_result <- chisq.test(contingency_table)
# 绘制百分比堆积图，并应用自定义颜色调色板，添加卡方检验的p值
ggplot(data_summary, aes(x = group, y = percentage, fill = factor(level))) +
geom_bar(stat = "identity", position = "fill") +
labs(title = NULL, x = "Group", y = "% of cases") +  # 删去标题和底注，修改y轴标注
scale_fill_manual(values = custom_palette) +  # 应用自定义颜色
geom_text(data = as.data.frame(contingency_table), aes(label = as.vector(contingency_table)),
position = position_fill(vjust = 0.5), color = "black", size = 3) + # 添加频数标签
geom_text(aes(x = 1.5, y = 5, label = sprintf("p = %.3f", chisq_result$p.value)),
color = "black", size = 5, hjust = 0.5) + # 添加p值标签
theme_minimal()
# 读取CSV文件并计算频率百分比
data <- read.csv("data2.csv")
data_summary <- data %>%
group_by(group, level) %>%
summarize(count = n()) %>%
mutate(percentage = count / sum(count) * 100)
# 创建R × C列联表
contingency_table <- table(data_summary$group, data_summary$level)
# 进行卡方检验
chisq_result <- chisq.test(contingency_table)
# 绘制百分比堆积图，并应用自定义颜色调色板，添加卡方检验的p值
ggplot(data_summary, aes(x = group, y = percentage, fill = factor(level))) +
geom_bar(stat = "identity", position = "fill") +
labs(title = NULL, x = "Group", y = "% of cases") +  # 删去标题和底注，修改y轴标注
scale_fill_manual(values = custom_palette) +  # 应用自定义颜色
geom_text(data = data_summary, aes(label = count), position = position_fill(vjust = 0.5), color = "black", size = 3) + # 添加频数标签
geom_text(aes(x = 1.5, y = 5, label = sprintf("p = %.3f", chisq_result$p.value)),
color = "black", size = 5, hjust = 0.5) + # 添加p值标签
theme_minimal()
# 读取CSV文件并计算频率百分比
data <- read.csv("data2.csv")
data_summary <- data %>%
group_by(group, level) %>%
summarize(count = n()) %>%
mutate(percentage = count / sum(count) * 100)
# 创建R × C列联表
cross_tab <- table(data$group, data$level)
# 进行卡方检验
chisq_result <- chisq.test(cross_tab)
# 将p值转换为科学计数法形式
p_value_sci <- format(chisq_result$p.value, scientific = TRUE)
# 绘制百分比堆积图，并应用自定义颜色调色板，添加卡方检验的p值
ggplot(data_summary, aes(x = group, y = percentage, fill = factor(level))) +
geom_bar(stat = "identity", position = "fill") +
labs(title = NULL, x = "Group", y = "% of cases") +  # 删去标题和底注，修改y轴标注
scale_fill_manual(values = custom_palette) +  # 应用自定义颜色
geom_text(data = data_summary, aes(label = count), position = position_fill(vjust = 0.5), color = "black", size = 3) + # 添加频数标签
geom_text(aes(x = 1.5, y = 1.2, label = paste("p =", p_value_sci)),
color = "black", size = 5, hjust = 0.5) + # 添加p值标签
theme_minimal()
# 读取CSV文件并计算频率百分比
data <- read.csv("data2.csv")
data_summary <- data %>%
group_by(group, level) %>%
summarize(count = n()) %>%
mutate(percentage = count / sum(count) * 100)
# 创建R × C列联表
cross_tab <- table(data$group, data$level)
# 进行卡方检验
chisq_result <- chisq.test(cross_tab)
# 将p值转换为科学计数法形式
p_value_sci <- format(chisq_result$p.value, scientific = TRUE)
# 绘制百分比堆积图，并应用自定义颜色调色板，添加卡方检验的p值
ggplot(data_summary, aes(x = group, y = percentage, fill = factor(level))) +
geom_bar(stat = "identity", position = "fill") +
labs(title = NULL, x = "Group", y = "% of cases") +  # 删去标题和底注，修改y轴标注
scale_fill_manual(values = custom_palette) +  # 应用自定义颜色
geom_text(data = data_summary, aes(label = count), position = position_fill(vjust = 0.5), color = "black", size = 3) + # 添加频数标签
geom_text(aes(x = 2, y = 1.1, label = paste("p =", p_value_sci)),
color = "black", size = 2.5, hjust = 0.5) + # 添加p值标签
theme_minimal()
# 读取CSV文件并计算频率百分比
data <- read.csv("data2.csv")
data_summary <- data %>%
group_by(group, level) %>%
summarize(count = n()) %>%
mutate(percentage = count / sum(count) * 100)
# 创建R × C列联表
cross_tab <- table(data$group, data$level)
# 进行卡方检验
chisq_result <- chisq.test(cross_tab)
# 将p值转换为科学计数法形式
p_value_sci <- format(chisq_result$p.value, scientific = TRUE)
# 绘制百分比堆积图，并应用自定义颜色调色板，添加卡方检验的p值
ggplot(data_summary, aes(x = group, y = percentage, fill = factor(level))) +
geom_bar(stat = "identity", position = "fill") +
labs(title = NULL, x = "Group", y = "% of cases") +  # 删去标题和底注，修改y轴标注
scale_fill_manual(values = custom_palette) +  # 应用自定义颜色
geom_text(data = data_summary, aes(label = count), position = position_fill(vjust = 0.5), color = "black", size = 3) + # 添加频数标签
geom_text(aes(x = 2, y = 1.1, label = paste("p =", p_value_sci)),
color = "black", size = 3.5, hjust = 0.5) + # 添加p值标签
theme_minimal()
# 读取CSV文件并计算频率百分比
data <- read.csv("data2.csv")
data_summary <- data %>%
group_by(group, level) %>%
summarize(count = n()) %>%
mutate(percentage = count / sum(count) * 100)
# 创建R × C列联表
cross_tab <- table(data$group, data$level)
# 进行卡方检验
chisq_result <- chisq.test(cross_tab)
# 将p值转换为科学计数法形式
p_value_sci <- format(chisq_result$p.value, scientific = TRUE)
# 绘制百分比堆积图，并应用自定义颜色调色板，添加卡方检验的p值
ggplot(data_summary, aes(x = group, y = percentage, fill = factor(level))) +
geom_bar(stat = "identity", position = "fill") +
labs(title = NULL, x = "Group", y = "% of cases") +  # 删去标题和底注，修改y轴标注
scale_fill_manual(values = custom_palette) +  # 应用自定义颜色
geom_text(data = data_summary, aes(label = count), position = position_fill(vjust = 0.5), color = "black", size = 3) + # 添加频数标签
geom_text(aes(x = 2, y = 1.1, label = paste("p =", p_value_sci)),
color = "black", size = 3.5, hjust = 0.5) + # 添加p值标签
theme_minimal()
# 读取CSV文件并计算频率百分比
data <- read.csv("data2.csv")
data_summary <- data %>%
group_by(group, level) %>%
summarize(count = n()) %>%
mutate(percentage = count / sum(count) * 100)
# 创建R × C列联表
cross_tab <- table(data$group, data$level)
# 进行卡方检验
chisq_result <- chisq.test(cross_tab)
# 将p值转换为科学计数法形式
p_value_sci <- format(chisq_result$p.value, scientific = TRUE)
# 绘制百分比堆积图，并应用自定义颜色调色板，添加卡方检验的p值
ggplot(data_summary, aes(x = group, y = percentage, fill = factor(level))) +
geom_bar(stat = "identity", position = "fill") +
labs(title = NULL, x = "Group", y = "% of cases") +  # 删去标题和底注，修改y轴标注
scale_fill_manual(values = custom_palette) +  # 应用自定义颜色
geom_text(data = data_summary, aes(label = count), position = position_fill(vjust = 0.5), color = "black", size = 3) + # 添加频数标签
geom_text(aes(x = 2, y = 1.1, label = paste("p =", p_value_sci)),
color = "black", size = 3.5, hjust = 0.5) + # 添加p值标签
theme_minimal()
# 保存图片到指定路径（例如：/path/to/save/plot.png）
ggsave(filename = "C:/Users/吾乃吾皇/Desktop/result2.png", plot = p, width = 6, height = 4, dpi = 300)
# 读取CSV文件并计算频率百分比
data <- read.csv("data2.csv")
data_summary <- data %>%
group_by(group, level) %>%
summarize(count = n()) %>%
mutate(percentage = count / sum(count) * 100)
# 创建R × C列联表
cross_tab <- table(data$group, data$level)
# 进行卡方检验
chisq_result <- chisq.test(cross_tab)
# 将p值转换为科学计数法形式
p_value_sci <- format(chisq_result$p.value, scientific = TRUE)
# 绘制百分比堆积图，并应用自定义颜色调色板，添加卡方检验的p值
ggplot(data_summary, aes(x = group, y = percentage, fill = factor(level))) +
geom_bar(stat = "identity", position = "fill") +
labs(title = NULL, x = "Group", y = "% of cases") +  # 删去标题和底注，修改y轴标注
scale_fill_manual(values = custom_palette) +  # 应用自定义颜色
geom_text(data = data_summary, aes(label = count), position = position_fill(vjust = 0.5), color = "black", size = 3) + # 添加频数标签
geom_text(aes(x = 2, y = 1.1, label = paste("p =", p_value_sci)),
color = "black", size = 3.5, hjust = 0.5) + # 添加p值标签
theme_minimal()
# 保存图片到指定路径（例如：/path/to/save/plot.png）
ggsave(filename = "C:/Users/吾乃吾皇/Desktop/result2.png", plot = last_plot(), width = 6, height = 4, dpi = 300)
# 创建两组数据
group1 <- c(0.8354, 0.1605, 0.9221)
group2 <- c(1.2763, 1.6349, 1.1765)
# 执行独立双样本t检验
t_result <- t.test(group1, group2)
# 输出t检验结果
t_result
# 创建两组数据
group1 <- c(0.8354, 0.7531, 0.9221)
group2 <- c(1.2763, 1.6349, 1.1765)
# 执行独立双样本t检验
t_result <- t.test(group1, group2)
# 输出t检验结果
t_result
BiocManager::install()
install.packages("ggplot2")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(version = "3.18")
library(edgeR)
sessionInfo(edgeR)
sessionInfo("edgeR")
library(ggplot2)
library(ggpubr)
sessionInfo("ggpubr")
library(GSVA)
library(pubmedR)
install.packages("pudmedR")
install.packages("pubmedR")
library(pubmedR)
api_key = NULL
# pubmed only allows downloading less than 10k records at a time,
# so I split them into two parts
query = '("Bioinformatics (Oxford, England)"[Journal]) AND (("1998"[Date - Publication] : "2014"[Date - Publication]))'
res <- pmQueryTotalCount(query = query, api_key = api_key)
D1 <- pmApiRequest(query = query, limit = res$total_count, api_key = NULL)
library(rio)
x <- import("clipboard")
View(x)
x <- import("clipboard")
x <- unique(x)
export(x,"clipboard")
x <- import("clipboard")
x <- import("clipboard")
x <- import("clipboard")
x <- import("clipboard",check.attributes = FALSE)
x <- import("clipboard",header = T)
x <- import("clipboard",header = f)
x <- import("clipboard",header = F)
x <- unique(x)
x <- unique(x[[2]])
x <- import("clipboard")
x <- unique(x[2])
c <- unique(x[[2]])
c <- unique(x[[1]])
rm(list = ls())
x <- import("clipboard")
x <- unique(x[[[2]]])
x <- import("clipboard")
x <- unique(x[[2]])
new_data <- data.frame(
rank = 1:length(x),
school = x
)
export(new_data,"clipboard")
View(new_data)
x <- import("clipboard")
x <- unique(x[[2]])
new_data <- data.frame(
rank = 1:length(x),
school = x
)
export(new_data,"clipboard")
x <- import("clipboard")
x <- unique(x[[2]])
new_data <- data.frame(
rank = 1:length(x),
school = x
)
export(new_data,"clipboard")
x <- import("clipboard")
x <- unique(x[[2]])
new_data <- data.frame(
rank = 1:length(x),
school = x
)
export(new_data,"clipboard")
x <- import("clipboard")
x <- unique(x[[2]])
new_data <- data.frame(
rank = 1:length(x),
school = x
)
export(new_data,"clipboard")
x <- import("clipboard")
x <- unique(x[[2]])
new_data <- data.frame(
rank = 1:length(x),
school = x
)
export(new_data,"clipboard")
x <- import("clipboard")
x <- import("clipboard")
help("import")
x <- import("clipboard")
x <- x %>% filter(!is.character(school))
x <- import("clipboard")
# 过滤出列a中不以数字开头的行
x <- x %>% filter(!grepl("^\\d",school))
library(dplyr)
x <- import("clipboard")
# 过滤出列a中不以数字开头的行
x <- x %>% filter(!grepl("^\\d",school))
#from website:https://www.shanghairanking.com/rankings/gras/
x <- import("clipboard")
x <- unique(x[[2]])
new_data <- data.frame(
rank = 1:length(x),
school = x
)
export(new_data,"clipboard")
library(dplyr)
x <- import("clipboard")
# 过滤出列a中不以数字开头的行
x <- x %>% filter(!grepl("^\\d",school))
# 创建一个序列作为行号
x$row_number <- seq_len(nrow(x))
# 过滤出偶数行
x <- x %>% filter(row_number %% 2 != 0)
# 删除row_number列
x <- select(x, -row_number)
export(x,"clipboard")
rm(list =ls())
x <- import("clipboard")
# 过滤出列a中不以数字开头的行
x <- x %>% filter(!grepl("^\\d",school))
# 创建一个序列作为行号
x$row_number <- seq_len(nrow(x))
# 过滤出偶数行
x <- x %>% filter(row_number %% 2 != 0)
# 删除row_number列
x <- select(x, -row_number)
export(x,"clipboard")
x <- import("clipboard")
# 过滤出列a中不以数字开头的行
x <- x %>% filter(!grepl("^\\d",school))
x <- import("clipboard")
# 过滤出列a中不以数字开头的行
x <- x %>% filter(!grepl("^\\d",school))
# 创建一个序列作为行号
x$row_number <- seq_len(nrow(x))
# 过滤出偶数行
x <- x %>% filter(row_number %% 2 != 0)
# 删除row_number列
x <- select(x, -row_number)
export(x,"clipboard")
x <- import("clipboard")
# 过滤出列a中不以数字开头的行
x <- x %>% filter(!grepl("^\\d",school))
# 创建一个序列作为行号
x$row_number <- seq_len(nrow(x))
# 过滤出偶数行
x <- x %>% filter(row_number %% 2 != 0)
# 删除row_number列
x <- select(x, -row_number)
export(x,"clipboard")
x <- import("clipboard")
# 过滤出列a中不以数字开头的行
x <- x %>% filter(!grepl("^\\d",school))
# 创建一个序列作为行号
x$row_number <- seq_len(nrow(x))
# 过滤出偶数行
x <- x %>% filter(row_number %% 2 != 0)
# 删除row_number列
x <- select(x, -row_number)
export(x,"clipboard")
x <- import("clipboard")
# 过滤出列a中不以数字开头的行
x <- x %>% filter(!grepl("^\\d",school))
# 创建一个序列作为行号
x$row_number <- seq_len(nrow(x))
# 过滤出偶数行
x <- x %>% filter(row_number %% 2 != 0)
# 删除row_number列
x <- select(x, -row_number)
export(x,"clipboard")
install.packages(‘bibliometrix’, dependencies=TRUE)
install.packages("bibliometrix",dependencies = TRUE)
library(bibliometrix)
biblioshiny()
# we choose dis_1,dis_2,dis_4,dis_6,dis_11
setwd("D:\\skills\\生信接单\\20250504第八单帮写论文")
load("data_clean.rdata")
library(ggstatsplot)
library(ggpubr)
library(rlang)
library(patchwork)
data <- data[,c("dialysis","nul_all","nul_rank")]
# 1. dialysis and nul_all 之间 的相关性 --------------------------
var_x <- "dialysis"
var_y <- "nul_all"
data <- as.data.frame(data)
# 使用 ggscatterstats 绘图（动态变量名）
p1<-ggscatterstats(data = data,
x = !!sym(var_x),
y = !!sym(var_y),
type = "spearman",
centrality.para = "mean",
margins = "both",
xfill = "#CC79A7",
yfill = "#009E73",
marginal.type = "histogram",
title = paste("Relationship between", var_x, "and", var_y))
p1
View(p1)
library(statsExpressions)
# 直接提取统计信息，而不是画图
result <- ggscatterstats(
data = data,
x = !!sym(var_x),
y = !!sym(var_y),
type = "spearman",
output = "data" # <-- 关键参数
)
# 查看返回的统计学结果
print(result)
setwd("D:\\skills\\生信接单\\20250504第八单帮写论文")
load("data_clean.rdata")
# 加载所需包
library(mediation)
# 定义变量名
vars <- c("dialysis", "dis_all", "nul_all")
# 初始化结果数据框
mediation_results <- data.frame(
X = character(),
M = character(),
Y = character(),
ACME = numeric(),
ADE = numeric(),
Total_Effect = numeric(),
Prop_Mediated = numeric(),
p_ACME = numeric(),
p_ADE = numeric(),
p_Total_Effect = numeric(),
stringsAsFactors = FALSE
)
# 三变量两两组合进行中介分析
for (X in vars) {
for (M in vars[vars != X]) {
for (Y in vars[vars != X & vars != M]) {
# 1. mediator 模型
model_mediator <- try(lm(as.formula(paste(M, "~", X)), data = data), silent = TRUE)
if (inherits(model_mediator, "try-error")) next
# 2. outcome 模型
model_outcome <- try(lm(as.formula(paste(Y, "~", M, "+", X)), data = data), silent = TRUE)
if (inherits(model_outcome, "try-error")) next
# 3. mediation 分析
mediation_result <- try(mediate(model_mediator, model_outcome, treat = X, mediator = M), silent = TRUE)
if (inherits(mediation_result, "try-error")) next
# 4. 保存结果，统一做 NULL 检查
mediation_results <- rbind(mediation_results, data.frame(
X = X,
M = M,
Y = Y,
ACME = ifelse(is.null(mediation_result$d0), NA, mediation_result$d0),
ADE = ifelse(is.null(mediation_result$z0), NA, mediation_result$z0),
Total_Effect = ifelse(is.null(mediation_result$tau.coef), NA, mediation_result$tau.coef),
Prop_Mediated = ifelse(is.null(mediation_result$prop.med), NA, mediation_result$prop.med),
p_ACME = ifelse(is.null(mediation_result$d0.p), NA, mediation_result$d0.p),
p_ADE = ifelse(is.null(mediation_result$z0.p), NA, mediation_result$z0.p),
p_Total_Effect = ifelse(is.null(mediation_result$tau.p), NA, mediation_result$tau.p)
))
}
}
}
# 查看结果
print(mediation_results)
write.csv(mediation_results, "./results/17.mediation_results.csv", row.names = FALSE)
# X	M	Y	结论简述
# dialysis	dis_all	nul_all	直接有效，无中介效应
# dialysis	nul_all	dis_all	中介有效（p = 0.028），但总效应不显著
# dis_all	dialysis	nul_all	直接作用显著（p < 0.001），中介无效
# dis_all	nul_all	dialysis	中介作用显著（p = 0.018），但整体影响不显著
# nul_all	dialysis	dis_all	直接作用显著，中介不显著
# nul_all	dis_all	dialysis	没有显著中介或直接作用
# Mediation analysis revealed that dialysis duration had a significant direct effect on malnutrition (p = 0.020), without significant mediation through comorbidities. This suggests that the influence of dialysis duration on nutritional status is primarily direct.
